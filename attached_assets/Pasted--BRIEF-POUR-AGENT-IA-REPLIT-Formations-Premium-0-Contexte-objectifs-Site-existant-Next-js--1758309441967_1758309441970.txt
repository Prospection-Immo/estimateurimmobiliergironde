✅ BRIEF POUR AGENT IA REPLIT — “Formations Premium”
0) Contexte & objectifs

Site existant: Next.js 14 (app router) + TypeScript + Tailwind + shadcn/ui, Supabase (DB + auth), Nginx/PM2 sur VPS.

Objectif: ajouter un module Formations avec:

Catalogue /formations (coming soon possible),

Pages de vente (5 slugs),

Paiement Stripe Checkout /paiement?sku=...,

Webhook Stripe → création commande + accès,

Page de remerciement /merci (+ upsell),

Espace client /espace-client (voir ses formations),

Admin léger /admin/formations (suivi ventes),

Tracking visionnage (25/50/100%),

Emails post-achat (Resend ou SMTP).

Livrable = code complet, testé en local avec Stripe CLI, prêt à déployer (variables d’env prod + Nginx).

1) ENV & variables (ajouter à .env / secrets Replit)
# Stripe
STRIPE_SECRET_KEY=sk_live_or_test_********
STRIPE_WEBHOOK_SECRET=whsec_********
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_or_test_********

# Supabase
NEXT_PUBLIC_SUPABASE_URL=https://xxxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=ey********
SUPABASE_SERVICE_ROLE_KEY=ey********  # (server only)

# Email (choisir l’un)
RESEND_API_KEY=re_********
# OU SMTP
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=no-reply@example.com
SMTP_PASS=********

2) Stripe — produits & “lookup_keys”

Créer 5 prices dans Stripe (Dashboard ou script) avec lookup_key pour chaque SKU:

ESTIMER97 → 97€ TTC (one-time)

FACE147 → 147€ TTC (one-time)

QUALI97 → 97€ TTC (one-time)

PO147 → 147€ TTC (one-time)

PACK397 → 397€ TTC (one-time)

(optionnel upsell immédiat) UPSELLPACK300 → 300€ TTC (one-time)

Notes:

Activer Tax comportement inclus si TVA incluse.

Renseigner “Product name” = titre public (ex: “Estimer son bien comme un pro”).

Garder l’ID Price mais utiliser lookup_key côté backend (plus robuste).

3) Supabase — schéma SQL (créer migration)
-- users: déjà géré par Supabase Auth (sinon créer table miroir)
create table if not exists courses (
  sku text primary key,
  title text not null,
  slug text not null unique,
  price_cents int not null,
  description text,
  created_at timestamptz default now()
);

create table if not exists orders (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  stripe_session_id text not null unique,
  total_cents int not null,
  currency text not null default 'eur',
  status text not null default 'paid', -- 'paid','refunded'
  utm_source text,
  utm_medium text,
  utm_campaign text,
  created_at timestamptz default now()
);

create table if not exists order_items (
  id uuid primary key default gen_random_uuid(),
  order_id uuid references orders(id) on delete cascade,
  sku text references courses(sku),
  unit_price_cents int not null,
  qty int not null default 1
);

create table if not exists enrollments (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  sku text references courses(sku),
  access_expires_at timestamptz,
  created_at timestamptz default now(),
  unique (user_id, sku)
);

create table if not exists events (
  id uuid primary key default gen_random_uuid(),
  user_id uuid,
  sku text,
  type text, -- 'video_start','video_25','video_50','video_100','download_model'
  meta jsonb,
  created_at timestamptz default now()
);

-- Seed cours
insert into courses (sku, title, slug, price_cents, description) values
('ESTIMER97','Estimer son bien comme un pro','estimer-bien',9700,'Méthode simple, fiable, reproductible.'),
('FACE147','Promouvoir son bien avec Facebook','facebook-immobilier',14700,'Publier, booster, capter des contacts qualifiés.'),
('QUALI97','Qualifier ses acheteurs','qualifier-acheteurs',9700,'Scripts et signaux pour filtrer efficacement.'),
('PO147','Porte ouverte unique & optimisée','porte-ouverte-optimisee',14700,'Organisation, calendrier, mise en scène, effet d’urgence.'),
('PACK397','Pack complet “Devenir son propre agent”','pack-complet',39700,'Les 4 formations + modèles prêts à l’emploi.')
on conflict do nothing;

4) Arborescence & routes (app router)

Créer/compléter:

/app
  /formations/page.tsx               # Catalogue
  /formations/[slug]/page.tsx        # Vente dynamique
  /paiement/page.tsx                 # Création checkout session
  /merci/page.tsx                    # Merci + upsell
  /espace-client/page.tsx            # Mes formations
  /admin/formations/page.tsx         # Admin léger

/api
  /checkout/route.ts                 # POST -> Stripe Checkout
  /stripe/webhook/route.ts           # POST -> Webhook
  /events/video/route.ts             # POST -> log vidéo progress
  /email/receipt/route.ts            # POST -> envoyer facture / accès (optionnel)

5) Contenu (JSON/TS centralisé)

Créer /content/courses.ts pour le copywriting (titres, bullets, FAQ, bonus, CTA). Remplir d’après le texte fourni précédemment.

Exemple structure:

export type Course = {
  sku: string;
  slug: string;
  title: string;
  price: number; // euros
  hero: { h1: string; hook: string; proof?: string };
  learn: string[];
  deliverables: string[];
  guarantee: string;
  ctaLabel: string; // "Obtenir la formation – 97€"
};

export const courses: Record<string, Course> = {
  ESTIMER97: { /* ... contenu ... */ },
  FACE147: { /* ... */ },
  QUALI97: { /* ... */ },
  PO147: { /* ... */ },
  PACK397: { /* ... */ }
};

6) Catalogue /formations

Grille de cards depuis courses.ts.

Bandeau “Arrive très bientôt / Pré-lancement” (feature flag COMING_SOON=true via env; si true, les boutons “acheter” -> désactivés + modal email).

CTA “Être prévenu” → modal -> POST vers MailerLite/Sendy/Resend list (stub pour l’instant).

7) Pages de vente /formations/[slug]

Lire slug → trouver sku → piocher texte dans courses.ts.

Sections: H1/Hook, “Ce que vous allez apprendre”, “Ce que vous recevez”, “Garantie”, FAQ courte, CTA principal “Obtenir la formation – {prix}”.

Bouton → /paiement?sku=${sku} (si COMING_SOON actif: griser + modal).

8) Paiement /paiement

Lire sku en query; si absent → redirect /formations.

Bouton “Payer et accéder aux vidéos” appelle POST /api/checkout avec:

sku

success_url = ${origin}/merci?session_id={CHECKOUT_SESSION_ID}

cancel_url = ${origin}/formations/${slug}

client_reference_id = userId (si connecté Supabase)

metadata = { sku, utm_* }

Server‐side, mapper sku → lookup_key, créer Checkout Session (mode=payment, allow_promotion_codes=true).

Rediriger vers session.url.

9) Webhook Stripe /api/stripe/webhook

Vérifier signature STRIPE_WEBHOOK_SECRET.

Sur checkout.session.completed:

Récupérer session (email, amount_total, currency, client_reference_id, metadata.sku).

Associer/créer user (via Supabase Admin) si besoin.

Insérer orders + order_items.

Créer enrollments (user_id, sku).

Envoyer email d’accès (Resend/SMTP).

Option: si sku != PACK397 proposer upsell sur /merci (query upsell=1).

10) Page Merci /merci

“Merci, accès prêt” + bouton “Accéder à ma formation” → /espace-client.

Bloc Upsell immédiat (si user n’a pas PACK397): offre UPSELLPACK300 avec timer 20 min (state local). Boutons:

“Oui, je veux le pack à 300€” → /paiement?sku=UPSELLPACK300

“Non merci, accéder à ma formation”

11) Espace client /espace-client

Guard auth Supabase.

Lister enrollments → cards par sku.

Chaque card → page cours /espace-client/cours/[slug] (si tu veux la faire maintenant, créer sous-arborescence) avec lecteur vidéo + ancrages (chapitres).

Tracking: sur events 25/50/100% (timeupdate), POST /api/events/video.

12) Admin léger /admin/formations

Guard (rôle OrgAdmin / SuperAdmin).

Table des orders (date, email, total, sku(s), status).

Somme CA par période, filtres date/sku.

Lien “voir l’élève” → liste enrollments.

13) API — exemples (squelette)

/api/checkout/route.ts

Valider sku ∈ whitelist.

lookup_key = sku.

prices = await stripe.prices.list({lookup_keys:[lookup_key], active:true})

stripe.checkout.sessions.create({ line_items:[{price: prices.data[0].id, quantity:1}], mode:'payment', customer_email, success_url, cancel_url, client_reference_id, metadata })

return { url: session.url }

/api/stripe/webhook/route.ts

Lire raw body & signature.

event = stripe.webhooks.constructEvent(rawBody, sig, STRIPE_WEBHOOK_SECRET)

Case checkout.session.completed → logique DB + email.

/api/events/video/route.ts

Auth user.

insert events (user_id, sku, type, meta).

14) Player vidéo & tracking

Intégrer Vimeo/Wistia/Cloudflare Stream ou HTML5.

Hook:

onplay → video_start

à 25/50/100% → POST event (eviter double envoi via state).

15) Emails (Resend ou SMTP)

Sujet: 🎓 Votre accès – {{course_title}}

Contenu: lien /espace-client, facture (lien Stripe), rappel garantie 14j (<30% visionnage), support.

Créer /lib/email.ts + /emails/receipt.tsx (React Email si Resend).

16) Copywriting (à insérer dans courses.ts)

Utiliser les textes fournis:

Estimer 97€: H1, Hook, Learn list, Deliverables, Garantie.

Facebook 147€, Qualifier 97€, Porte Ouverte 147€ idem.

Pack 397€: hook + économies + bonus courtier.

Catalogue: bandeau “Arrive très bientôt”, CTA pré-lancement.

17) UI & composants

Components:

CourseCard.tsx (catalogue)

BuyButton.tsx (gère disabled si COMING_SOON)

Price.tsx (format euros)

AdminTable.tsx

Tailwind + shadcn/ui (Button, Card, Badge, Dialog pour modals).

18) Sécurité & conformité

Valider sku côté serveur (whitelist).

Ne jamais prendre le price_id depuis le client.

Stocker SUPABASE_SERVICE_ROLE_KEY uniquement server-side.

CGV Formations, Politique vie privée, Droit de rétractation (produits numériques; condition: <30% visionnage).

Logs d’events = élément probant en cas de remboursement.

19) Tests locaux

Stripe CLI:

stripe listen --forward-to localhost:3000/api/stripe/webhook

Copier le WH_SECRET dans .env.

Flow:

/formations → /formations/estimer-bien → /paiement?sku=ESTIMER97

Payer avec carte test

Vérifier webhook → DB orders, order_items, enrollments

Email reçu + accès /espace-client

Events vidéo s’enregistrent

20) Déploiement & Nginx

Ajouter variables d’env prod.

Assurer api/stripe/webhook raw body (désactiver bodyParser si besoin dans middleware) — App Router gère Request natif, lire arrayBuffer().

Ouvrir port HTTPS, vérifier proxy Nginx → pass /api/* vers Node.

PM2 restart.

21) Bonus (optionnel immédiat)

Upsell série emails si achat unitaire sans Pack: J+0, J+2, J+5 (Resend).

Coupons Stripe (pré-lancement).

UTM tracking sur orders (lire cookies utm_*).

Définition de done

Pages /formations, /formations/[slug], /paiement, /merci, /espace-client, /admin/formations opérationnelles.

Paiement → webhook → DB → accès + email OK.

Copy visible et modifiable via content/courses.ts.

Tests Stripe CLI passants, events vidéo loggués.